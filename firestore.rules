rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check for admin role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }

    // Users can only access their own user document
    match /users/{userId} {
      allow read, update, delete: if request.auth.uid == userId;
      allow create: if request.auth.uid != null;
    }
    
    // Business Profile: users can manage their own profile
    match /business_profiles/{userId} {
        allow read, write: if request.auth.uid == userId;
    }

    // AI Employees: Only admins can manage AI employees
    match /ai_employees/{employeeId} {
      allow read: if request.auth != null; // Any authenticated user can read
      allow create, update, delete: if isAdmin();
    }
    
    // AI Team Coordination: Users can create, but only manage their own entries
    match /ai_team_coordination/{coordinationId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null;
      allow update, delete: if request.auth.uid == resource.data.user_id;
    }

    // Business Goals: Users can manage their own goals
    match /business_goals/{goalId} {
      allow read, write: if request.auth.uid == resource.data.user_id;
      allow create: if request.auth.uid == request.resource.data.user_id;
    }
    
    // Shared Knowledge: Users can manage their own entries
    match /ai_shared_knowledge/{knowledgeId} {
        allow read, write: if request.auth.uid == resource.data.user_id;
        allow create: if request.auth.uid == request.resource.data.user_id;
    }
    
    // Deployment Requests: Users can create, admins manage
    match /deployment_requests/{requestId} {
        allow create: if request.auth != null;
        allow read: if request.auth.uid == resource.data.user_id || isAdmin();
        allow update, delete: if isAdmin();
    }
  }
}
