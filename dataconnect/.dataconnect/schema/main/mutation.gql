extend type Mutation {
  """
  ✨ Insert a single `AIEmployee` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  aIEmployee_insert(
    """
    Data object to insert into the table.
    """
    data: AIEmployee_Data!
  ): AIEmployee_KeyOutput! @fdc_generated(from: "AIEmployee", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `AIEmployeeSkill` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  aIEmployeeSkill_insert(
    """
    Data object to insert into the table.
    """
    data: AIEmployeeSkill_Data!
  ): AIEmployeeSkill_KeyOutput! @fdc_generated(from: "AIEmployeeSkill", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Skill` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  skill_insert(
    """
    Data object to insert into the table.
    """
    data: Skill_Data!
  ): Skill_KeyOutput! @fdc_generated(from: "Skill", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Task` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  task_insert(
    """
    Data object to insert into the table.
    """
    data: Task_Data!
  ): Task_KeyOutput! @fdc_generated(from: "Task", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `User` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insert(
    """
    Data object to insert into the table.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: INSERT_SINGLE)
  """
  ✨ Insert `AIEmployee` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  aIEmployee_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [AIEmployee_Data!]!
  ): [AIEmployee_KeyOutput!]! @fdc_generated(from: "AIEmployee", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `AIEmployeeSkill` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  aIEmployeeSkill_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [AIEmployeeSkill_Data!]!
  ): [AIEmployeeSkill_KeyOutput!]! @fdc_generated(from: "AIEmployeeSkill", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Skill` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  skill_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Skill_Data!]!
  ): [Skill_KeyOutput!]! @fdc_generated(from: "Skill", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Task` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  task_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Task_Data!]!
  ): [Task_KeyOutput!]! @fdc_generated(from: "Task", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `User` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert or update a single `AIEmployee` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `AIEmployee`.
  """
  aIEmployee_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: AIEmployee_Data!
  ): AIEmployee_KeyOutput! @fdc_generated(from: "AIEmployee", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `AIEmployeeSkill` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `AIEmployeeSkill`.
  """
  aIEmployeeSkill_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: AIEmployeeSkill_Data!
  ): AIEmployeeSkill_KeyOutput! @fdc_generated(from: "AIEmployeeSkill", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Skill` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Skill`.
  """
  skill_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Skill_Data!
  ): Skill_KeyOutput! @fdc_generated(from: "Skill", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Task` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Task`.
  """
  task_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Task_Data!
  ): Task_KeyOutput! @fdc_generated(from: "Task", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `User` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `User`.
  """
  user_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update `AIEmployee` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `AIEmployee`.
  """
  aIEmployee_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [AIEmployee_Data!]!
  ): [AIEmployee_KeyOutput!]! @fdc_generated(from: "AIEmployee", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `AIEmployeeSkill` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `AIEmployeeSkill`.
  """
  aIEmployeeSkill_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [AIEmployeeSkill_Data!]!
  ): [AIEmployeeSkill_KeyOutput!]! @fdc_generated(from: "AIEmployeeSkill", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Skill` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Skill`.
  """
  skill_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Skill_Data!]!
  ): [Skill_KeyOutput!]! @fdc_generated(from: "Skill", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Task` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Task`.
  """
  task_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Task_Data!]!
  ): [Task_KeyOutput!]! @fdc_generated(from: "Task", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `User` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `User`.
  """
  user_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: UPSERT_MULTIPLE)
  """
  ✨ Update a single `AIEmployee` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `AIEmployee` or `null` if not found.
  """
  aIEmployee_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: AIEmployee_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: AIEmployee_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: AIEmployee_Data!
  ): AIEmployee_KeyOutput @fdc_generated(from: "AIEmployee", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `AIEmployeeSkill` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `AIEmployeeSkill` or `null` if not found.
  """
  aIEmployeeSkill_update(
    """
    The key used to identify the object.
    """
    key: AIEmployeeSkill_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: AIEmployeeSkill_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: AIEmployeeSkill_Data!
  ): AIEmployeeSkill_KeyOutput @fdc_generated(from: "AIEmployeeSkill", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Skill` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Skill` or `null` if not found.
  """
  skill_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Skill_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Skill_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Skill_Data!
  ): Skill_KeyOutput @fdc_generated(from: "Skill", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Task` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Task` or `null` if not found.
  """
  task_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Task_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Task_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Task_Data!
  ): Task_KeyOutput @fdc_generated(from: "Task", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `User` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `User` or `null` if not found.
  """
  user_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: User_Data!
  ): User_KeyOutput @fdc_generated(from: "User", purpose: UPDATE_SINGLE)
  """
  ✨ Update `AIEmployee` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  aIEmployee_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: AIEmployee_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: AIEmployee_Data!
  ): Int! @fdc_generated(from: "AIEmployee", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `AIEmployeeSkill` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  aIEmployeeSkill_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: AIEmployeeSkill_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: AIEmployeeSkill_Data!
  ): Int! @fdc_generated(from: "AIEmployeeSkill", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Skill` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  skill_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Skill_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Skill_Data!
  ): Int! @fdc_generated(from: "Skill", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Task` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  task_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Task_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Task_Data!
  ): Int! @fdc_generated(from: "Task", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `User` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  user_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: User_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: User_Data!
  ): Int! @fdc_generated(from: "User", purpose: UPDATE_MULTIPLE)
  """
  ✨ Delete a single `AIEmployee` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  aIEmployee_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: AIEmployee_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: AIEmployee_FirstRow
  ): AIEmployee_KeyOutput @fdc_generated(from: "AIEmployee", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `AIEmployeeSkill` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  aIEmployeeSkill_delete(
    """
    The key used to identify the object.
    """
    key: AIEmployeeSkill_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: AIEmployeeSkill_FirstRow
  ): AIEmployeeSkill_KeyOutput @fdc_generated(from: "AIEmployeeSkill", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Skill` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  skill_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Skill_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Skill_FirstRow
  ): Skill_KeyOutput @fdc_generated(from: "Skill", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Task` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  task_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Task_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Task_FirstRow
  ): Task_KeyOutput @fdc_generated(from: "Task", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `User` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  user_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User_KeyOutput @fdc_generated(from: "User", purpose: DELETE_SINGLE)
  """
  ✨ Delete `AIEmployee` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  aIEmployee_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: AIEmployee_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "AIEmployee", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `AIEmployeeSkill` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  aIEmployeeSkill_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: AIEmployeeSkill_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "AIEmployeeSkill", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Skill` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  skill_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Skill_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Skill", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Task` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  task_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Task_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Task", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `User` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  user_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: User_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "User", purpose: DELETE_MULTIPLE)
}
